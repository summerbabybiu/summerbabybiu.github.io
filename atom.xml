<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-24T07:18:39.502Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>summerbaby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dnsmasq 的使用手册</title>
    <link href="http://yoursite.com/2018/09/13/dnsmasq/"/>
    <id>http://yoursite.com/2018/09/13/dnsmasq/</id>
    <published>2018-09-13T15:02:13.000Z</published>
    <updated>2019-02-24T07:18:39.502Z</updated>
    
    <content type="html"><![CDATA[<p>如何更好的用手机调试本地的页面、接口？<br>我选择在本地搭建了 DNS 服务器。<br>dnsmasq 轻量且易配置，提供 DNS 缓存和 DHCP 服务功能。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用 brew 直接安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dnsmasq</span><br></pre></td></tr></table></figure></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h3 id="配置-usr-local-etc-dnsmasq-conf"><a href="#配置-usr-local-etc-dnsmasq-conf" class="headerlink" title="配置 /usr/local/etc/dnsmasq.conf"></a>配置 <code>/usr/local/etc/dnsmasq.conf</code></h3><p>以下我提供的是最常见的配置</p><ul><li><p>resolv-file<br>指定 dns 解析的文件, 默认是 /etc/resolv.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolv-file=/usr/local/etc/resolv.dnsmasq.conf</span><br></pre></td></tr></table></figure></li><li><p>strict-order<br>表示严格按照 resolv-file 文件中的顺序从上到下进行 DNS 解析, 直到第一个成功解析成功为止</p></li><li><p>listen-address<br>监听地址，172.17.9.78为局域网分配给我本机的IP，如果只填写127.0.0.1，那么只针对本机有效，局域网内的其他服务器则无法访问这个 DNS 服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen-address=172.17.9.78,127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>no-hosts<br>dnsmasq 首先会寻找本地的 /etc/hosts 文件，再去寻找缓存下来的域名, 最后去上游 dns 服务器寻找。此项将禁止 dnsmasq 访问 本地 hosts</p></li><li><p>addn-hosts<br>自定义其他的 hosts 文件，按需求看自己要不要配哈，不配的话，会默认访问 /etc/hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addn-hosts=/usr/local/etc/dnsmasq.hosts</span><br></pre></td></tr></table></figure></li></ul><p>我的配置情况如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolv-file=/usr/local/etc/resolv.dnsmasq.conf </span><br><span class="line">listen-address=172.17.9.78,127.0.0.1</span><br><span class="line">strict-order</span><br></pre></td></tr></table></figure></p><h3 id="配置-resolv-file"><a href="#配置-resolv-file" class="headerlink" title="配置 resolv-file"></a>配置 <code>resolv-file</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /usr/local/etc/resolv.dnsmasq.conf</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nameserver 127.0.0.1 // 本机</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 1.1.1.1</span><br><span class="line">nameserver 172.17.40.160 // 局域网本身的 DNS （因为我的页面需要请求内网接口，所以需要加上这行）</span><br></pre></td></tr></table></figure><h3 id="配置-usr-local-etc-dnsmasq-hosts-或-etc-hosts"><a href="#配置-usr-local-etc-dnsmasq-hosts-或-etc-hosts" class="headerlink" title="配置 /usr/local/etc/dnsmasq.hosts 或 /etc/hosts"></a>配置 <code>/usr/local/etc/dnsmasq.hosts</code> 或 <code>/etc/hosts</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.17.9.78 hello.me</span><br></pre></td></tr></table></figure><p>如果配成 127.0.0.1 hello.me，局域网其他服务器无法访问 hello.me 这个域名</p><p>启动 dnsmasq</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">sudo brew services start dnsmasq</span><br><span class="line"></span><br><span class="line"># 重启</span><br><span class="line">sudo brew services restart dnsmasq</span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line">sudo brew services stop dnsmasq</span><br></pre></td></tr></table></figure><p>如果改动了泛解析规则，重启 dnsmasq 不会立即看到效果，可尝试清楚缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li>ping 一下 hello.me，看能不能 Ping 通</li><li>本机打开网页，看能不能正常访问网络。</li><li>手机在于电脑连接同一个局域网的条件下，配置 wifi 的 DNS，DNS 地址为电脑的 IP，然后尝试在手机打开 hello.me, 看能否正常访问。</li></ul><p>测试成功的话，就可以愉快的在手机上调试本地的开发页面啦~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何更好的用手机调试本地的页面、接口？&lt;br&gt;我选择在本地搭建了 DNS 服务器。&lt;br&gt;dnsmasq 轻量且易配置，提供 DNS 缓存和 DHCP 服务功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dnsmasq" scheme="http://yoursite.com/tags/dnsmasq/"/>
    
  </entry>
  
  <entry>
    <title>如何用 Hexo + GitHub 搭建博客</title>
    <link href="http://yoursite.com/2018/08/15/hello-world/"/>
    <id>http://yoursite.com/2018/08/15/hello-world/</id>
    <published>2018-08-15T18:11:45.000Z</published>
    <updated>2019-02-24T07:18:39.502Z</updated>
    
    <content type="html"><![CDATA[<p>搭完博客的第一篇文章，讲讲搭建的过程。</p><p>本文旨在让初学者快速上手，用 hexo 快速搭建自己的博客。😀<br><a id="more"></a></p><h3 id="what-is-hexo"><a href="#what-is-hexo" class="headerlink" title="what is hexo?"></a>what is <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo</a>?</h3><ul><li>blog framework</li><li>based on Node.js</li><li>backend free</li><li>simple &amp; powerful</li></ul><h3 id="创建-hexo-项目"><a href="#创建-hexo-项目" class="headerlink" title="创建 hexo 项目"></a>创建 hexo 项目</h3><ol><li><p>安装 hexo</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>初始化项目&amp;&amp;安装依赖</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init bolg（项目名称）</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>完成上述步骤之后，可以看到项目目录如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml // 网站的配置文件，可以在其中配置网站的大部分参数</span><br><span class="line">├── package.json // 应用程序的信息</span><br><span class="line">├── scaffolds // 模板文件夹，当新建文章的时候，Hexo会根据模板来建立文件</span><br><span class="line">├── source // 资源文件夹，用来存放用户资源的地方</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes // 主题文件夹，Hexo会根据主题来生成不同的静态页面</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>执行以下命令预览博客雏形：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g #生成静态页面，生成的内容在public文件夹下</span><br><span class="line">$ hexo s #启动本地服务，进行文章预览调试。hexo s --debug 命令可以用来调试</span><br></pre></td></tr></table></figure></li></ol><h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><ul><li><p>套用主题模板</p><p>  hexo 拥有很多主题，大家可以去各大网站寻找自己喜欢的主题，如：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>等等。<br>  在 theme 文件夹下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone 你想要主题地址</span><br></pre></td></tr></table></figure><p>   然后将 _config.yml 的 theme 配置成该主题的文件夹名称，执行</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>  查看新主题的展示效果。</p></li><li><p>自定义主题<br>  如你找不到满意的主题，可以自己写一个。那么如何自定义主题呢？<br>  主题文件夹只要包含：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- html template // html 模板（ejs/jade等）</span><br><span class="line">- config // _config.yml 配置文件</span><br><span class="line">- assets // 存放静态文件js、css等</span><br></pre></td></tr></table></figure><p>  推荐工具<a href="https://github.com/tcrowe/slush-hexo-theme" target="_blank" rel="noopener">slush</a>，在此先不展开叙述，可自行参照工具文档。</p></li></ul><h3 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h3><p> 首先先了解一下<a href="https://help.github.com/articles/what-is-github-pages/" target="_blank" rel="noopener">GitHub page</a><br> 了解之后我们知道了，部署的实质，就是把 generate 到 public 文件夹下的内容同步到你的 username.github.io 项目之下。</p><ul><li><p>笨方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- cd ./public</span><br><span class="line">- git init</span><br><span class="line">- git config user.name &quot;summerbaby&quot;  #修改name</span><br><span class="line">- git config user.email &quot;xxxx@qq.com&quot;  #修改email</span><br><span class="line">- git add .</span><br><span class="line">- git commit -m &quot;update&quot;</span><br><span class="line">- git remote add origin git@github.com:summerbabybiu/summerbabybiu.github.io.git</span><br><span class="line">- git push -f origin master</span><br></pre></td></tr></table></figure><p> 缺点： 每一次修改都要手动执行一遍上面的命令。</p></li></ul><ul><li><p>一劳永逸<br>  利用 travis-ci 实现自动化部署。。<br>  首先以 GitHub 账号登录 <a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a>，找到你想要部署的项目，开启并前往设置,如下图：<br>  <img src="/images/test.png" alt><br>  要想让 travis-ci 去部署，就要将您的 GitHub token 添加到项目的设置之中。<br>  先前往 GitHub 生成你的 token， 如下图：<br>  <img src="/images/token.png" alt><br>  然后将 token 配置到项目设置中， 如下图：<br>  <img src="/images/varibale.png" alt></p><p>  以上步骤完成之后，就可以去写脚本啦~~<br>  在项目的根目录下创建 <code>.travis.yml</code> 文件， 内容大致如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">language: node_js  #设置语言</span><br><span class="line"></span><br><span class="line">node_js: stable  #设置相应的版本</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install  #安装hexo及插件</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo cl  #清除</span><br><span class="line">  - hexo g  #生成</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;summerbaby&quot;  #修改name</span><br><span class="line">  - git config user.email &quot;xxxx@qq.com&quot;  #修改email</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;update&quot;</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master  #GH_TOKEN是在Travis中配置token的名称</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master </span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com/summerbabybiu/summerbabybiu.github.io.git  #设置GH_REF，注意更改yourname</span><br></pre></td></tr></table></figure><p>  部署脚本写完之后，提交代码，就可以去 <a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a> 查看部署进度啦~~~</p><p>  部署完之后，前往你的 <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 查看你的博客。</p></li></ul><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>撒花❀❀❀ 然后你就完成自己的博客啦啦啦啦😋</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭完博客的第一篇文章，讲讲搭建的过程。&lt;/p&gt;
&lt;p&gt;本文旨在让初学者快速上手，用 hexo 快速搭建自己的博客。😀&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nodeJs实现mysql事务</title>
    <link href="http://yoursite.com/2017/12/27/nodeJs-mysql/"/>
    <id>http://yoursite.com/2017/12/27/nodeJs-mysql/</id>
    <published>2017-12-27T19:23:45.000Z</published>
    <updated>2019-02-24T07:18:39.502Z</updated>
    
    <content type="html"><![CDATA[<p>嗷嗷，接了个老项目，没有成熟的ORM，emmm… 只能单独去实现。😊<br><a id="more"></a></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li><a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">mysql</a></li><li><a href="https://github.com/caolan/async" target="_blank" rel="noopener">async</a></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义连接对象</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">    host: <span class="string">'XXXX'</span>,</span><br><span class="line">    user: <span class="string">'XXXx'</span>,</span><br><span class="line">    password: <span class="string">'XXX'</span>,</span><br><span class="line">    database: <span class="string">'databaseName'</span>,</span><br><span class="line">    connectionLimit: <span class="number">10</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    waitForConnections: <span class="literal">false</span>,</span><br><span class="line">    charset: <span class="string">'utf8mb4'</span> <span class="comment">// 如果不设置，将无法存储 emoji</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTrans</span>(<span class="params">sqlparamsEntities, callback</span>) </span>&#123;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connection.beginTransaction(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`开始执行transaction，共执行<span class="subst">$&#123;sqlparamsEntities.length&#125;</span>条数据`</span>);</span><br><span class="line">            <span class="keyword">const</span> funcAry = [];</span><br><span class="line">            sqlparamsEntities.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sqlParam</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> temp = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">const</span> sql = sqlParam.sql;</span><br><span class="line">                    <span class="keyword">const</span> param = sqlParam.params;</span><br><span class="line">                    connection.query(sql, param, <span class="function"><span class="keyword">function</span>(<span class="params">tErr</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(tErr) &#123;</span><br><span class="line">                            <span class="keyword">return</span> cb(tErr);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> cb(<span class="literal">null</span>, <span class="string">'ok'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">                funcAry.push(temp);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">async</span>.series(funcAry, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`end,transaction error:<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                    connection.rollback(<span class="function"><span class="keyword">function</span>(<span class="params">err1</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`transaction error:<span class="subst">$&#123;err1&#125;</span>`</span>);</span><br><span class="line">                        connection.release();</span><br><span class="line">                        <span class="keyword">return</span> callback(err, <span class="literal">null</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    connection.commit(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'transaction info:'</span>);</span><br><span class="line">                        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">`执行事务失败，<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">                            connection.rollback(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">`transaction error:<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">                                connection.release();</span><br><span class="line">                                <span class="keyword">return</span> callback(err, <span class="literal">null</span>);</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            connection.release();</span><br><span class="line">                            <span class="keyword">return</span> callback(<span class="literal">null</span>, result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> agree = [</span><br><span class="line">    &#123;</span><br><span class="line">        sql: <span class="string">'INSERT INTO `api_group_history` SET ?'</span>,</span><br><span class="line">        params: historyInfo</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        sql: <span class="string">'DELETE FROM `api_group_api` where (`api_group_id` = ?) AND (`api_id` in (?))'</span>,</span><br><span class="line">        params: [ apiGroup.id, apiGroupCheck.newApis ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        sql: <span class="string">'DELETE FROM `api_group_check` WHERE (`id` = ?) LIMIT 1'</span>,</span><br><span class="line">        params: id</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"> dbHelper.execTrans(agree, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="comment">// 事务执行失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 事务执行成功</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗷嗷，接了个老项目，没有成熟的ORM，emmm… 只能单独去实现。😊&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
</feed>
